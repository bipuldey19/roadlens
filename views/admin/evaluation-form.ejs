<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= evaluator.full_name %>'s Evaluation Form - Road Lens</title>
    <link rel="icon" type="image/x-icon" href="../assets/favicon2.png">
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <style>
        /* Prevent page shift when modal opens */
        body.modal-open {
            overflow: hidden;
        }
        
        /* This creates a scrollbar-width placeholder to prevent layout shift */
        html {
            scrollbar-gutter: stable;
        }
        
        /* Style for the modal backdrop */
        .modal-backdrop {
            opacity: 0;
            transition: opacity 0.3s ease;
        }
        
        .modal-backdrop.active {
            opacity: 1;
        }
    </style>
</head>
<body class="bg-gray-100">
    <%- include('../partials/navbar') %>

    <!-- Image Popup Modal -->
    <div id="imageModal" class="fixed inset-0 bg-black bg-opacity-75 z-50 items-center justify-center p-4 opacity-0 transition-opacity duration-300" style="display: none;">
        <div class="relative max-w-4xl w-full">
            <!-- Close button -->
            <button onclick="closeImageModal()" 
                    class="absolute -top-4 -right-4 bg-white rounded-full p-2 shadow-lg hover:bg-gray-100 transition-colors">
                <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                </svg>
            </button>
            <!-- Image container -->
            <img id="modalImage" src="" alt="Full size image" 
                 class="w-full h-auto max-h-[90vh] object-contain rounded-lg shadow-2xl" 
                 onclick="event.stopPropagation()">
        </div>
    </div>

    <!-- Approve Confirmation Modal -->
    <div id="approve-modal" tabindex="-1" class="hidden overflow-y-auto overflow-x-hidden fixed top-0 right-0 left-0 z-[9999] justify-center items-center w-full md:inset-0 h-[calc(100%-1rem)] max-h-full">
        <!-- Backdrop -->
        <div class="fixed inset-0 bg-black bg-opacity-50 modal-backdrop" id="approve-modal-backdrop"></div>
        <div class="relative p-4 w-full max-w-md max-h-full">
            <div class="relative bg-white rounded-lg shadow-sm">
                <button type="button" class="absolute top-3 end-2.5 text-gray-400 bg-transparent hover:bg-gray-200 hover:text-gray-900 rounded-lg text-sm w-8 h-8 ms-auto inline-flex justify-center items-center" id="close-approve-modal">
                    <svg class="w-3 h-3" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 14 14">
                        <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m1 1 6 6m0 0 6 6M7 7l6-6M7 7l-6 6"/>
                    </svg>
                    <span class="sr-only">Close modal</span>
                </button>
                <div class="p-4 md:p-5 text-center">
                    <svg class="mx-auto mb-4 text-green-500 w-12 h-12" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 20 20">
                        <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 5v4m0 2h.01M19 10a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z"/>
                    </svg>
                    <h3 class="mb-5 text-lg font-normal text-gray-700">Approve Evaluator?</h3>
                    <p class="mb-5 text-sm text-gray-500">This will grant them surveyor access.</p>
                    <button id="confirm-approve" type="button" class="text-white bg-green-600 hover:bg-green-800 focus:ring-4 focus:outline-none focus:ring-green-300 font-medium rounded-lg text-sm inline-flex items-center px-5 py-2.5 text-center">
                        Yes, approve
                    </button>
                    <button id="cancel-approve" type="button" class="py-2.5 px-5 ms-3 text-sm font-medium text-gray-900 focus:outline-none bg-white rounded-lg border border-gray-200 hover:bg-gray-100 hover:text-blue-700 focus:z-10 focus:ring-4 focus:ring-gray-100">
                        Cancel
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Reject Confirmation Modal -->
    <div id="reject-modal" tabindex="-1" class="hidden overflow-y-auto overflow-x-hidden fixed top-0 right-0 left-0 z-[9999] justify-center items-center w-full md:inset-0 h-[calc(100%-1rem)] max-h-full">
        <!-- Backdrop -->
        <div class="fixed inset-0 bg-black bg-opacity-50 modal-backdrop" id="reject-modal-backdrop"></div>
        <div class="relative p-4 w-full max-w-md max-h-full">
            <div class="relative bg-white rounded-lg shadow-sm">
                <button type="button" class="absolute top-3 end-2.5 text-gray-400 bg-transparent hover:bg-gray-200 hover:text-gray-900 rounded-lg text-sm w-8 h-8 ms-auto inline-flex justify-center items-center" id="close-reject-modal">
                    <svg class="w-3 h-3" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 14 14">
                        <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m1 1 6 6m0 0 6 6M7 7l6-6M7 7l-6 6"/>
                    </svg>
                    <span class="sr-only">Close modal</span>
                </button>
                <div class="p-4 md:p-5 text-center">
                    <svg class="mx-auto mb-4 text-red-500 w-12 h-12" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 20 20">
                        <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 11V6m0 8h.01M19 10a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z"/>
                    </svg>
                    <h3 class="mb-5 text-lg font-normal text-gray-700">Reject Submission?</h3>
                    <p class="mb-5 text-sm text-gray-500">This action cannot be undone.</p>
                    <button id="confirm-reject" type="button" class="text-white bg-red-600 hover:bg-red-800 focus:ring-4 focus:outline-none focus:ring-red-300 font-medium rounded-lg text-sm inline-flex items-center px-5 py-2.5 text-center">
                        Yes, reject
                    </button>
                    <button id="cancel-reject" type="button" class="py-2.5 px-5 ms-3 text-sm font-medium text-gray-900 focus:outline-none bg-white rounded-lg border border-gray-200 hover:bg-gray-100 hover:text-blue-700 focus:z-10 focus:ring-4 focus:ring-gray-100">
                        Cancel
                    </button>
                </div>
            </div>
        </div>
    </div>

    <div class="container max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6">
        <!-- Overview Card -->
        <div class="bg-white rounded-lg shadow p-6 mb-6">
            <h2 class="text-2xl font-bold text-gray-800 mb-4">Personal Information</h2>
            <p class="text-sm text-gray-600 mb-4">Applicant details and contact information</p>
            <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                    <p class="text-gray-600">Name: <span class="font-semibold text-gray-900"><%= evaluator.full_name %></span></p>
                    <p class="text-gray-600">Age: <span class="font-semibold text-gray-900"><%= evaluator.age %></span></p>
                </div>
                <div>
                    <p class="text-gray-600">Institution: <span class="font-semibold text-gray-900"><%= evaluator.institution_name %></span></p>
                    <p class="text-gray-600">Type: <span class="font-semibold text-gray-900"><%= evaluator.institution_type.charAt(0).toUpperCase() + evaluator.institution_type.slice(1) %></span></p>
                </div>
            </div>
        </div>

        <!-- Knowledge Test Results -->
        <div class="bg-white rounded-lg shadow p-6 mb-6">
            <h2 class="text-2xl font-bold text-gray-800 mb-4">Knowledge Test Results</h2>
            <p class="text-sm text-gray-600 mb-4">Answers submitted for the knowledge assessment</p>
            <div class="space-y-4">
                <% 
                let score = 0;
                knowledgeResponses.forEach(response => {
                    const question = questions.find(q => q.QuesId === response.question_id);
                    if (question && question.MultiAns === response.selected_option) {
                        score++;
                    }
                %>
                    <div class="p-4 <%= question && question.MultiAns === response.selected_option ? 'bg-green-50' : 'bg-red-50' %> rounded-lg">
                        <p class="font-semibold"><%= question ? question.MultiQues : 'Question not found' %></p>
                        <p class="mt-2">Selected Answer: <%= response.selected_option %></p>
                        <p>Correct Answer: <%= question ? question.MultiAns : 'N/A' %></p>
                    </div>
                <% }); %>
                <div class="mt-4 text-xl font-bold">
                    Score: <%= score %>/<%= knowledgeResponses.length %>
                </div>
            </div>
        </div>

        <!-- Image Assessments -->
        <div class="bg-white rounded-lg shadow p-6 mb-6">
            <h2 class="text-2xl font-bold text-gray-800 mb-4">Image Assessments</h2>
            <p class="text-sm text-gray-600 mb-4">Road distress identification responses</p>
            <div class="grid grid-cols-1 lg:grid-cols-2 gap-4 md:gap-6">
                <% imageAssessments.forEach(assessment => { %>
                    <div class="border rounded-lg p-4">
                        <% if (assessment.image_url) { %>
                            <div class="relative group">
                                <img src="<%= assessment.image_url %>" 
                                     alt="Assessment Image" 
                                     class="w-full h-48 object-cover rounded-lg mb-4 assessment-image cursor-zoom-in hover:opacity-90 transition-opacity"
                                     onerror="this.src='placeholder-image.jpg'; this.onerror=null;"
                                     onclick="openImageModal('<%= assessment.image_url %>')">
                                <div class="absolute inset-0 flex items-center justify-center opacity-0 group-hover:opacity-100 transition-opacity"
                                     onclick="openImageModal('<%= assessment.image_url %>')">
                                    <div class="bg-black bg-opacity-50 rounded-full p-2">
                                        <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" 
                                                  d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0zM10 7v6m3-3H7">
                                            </path>
                                        </svg>
                                    </div>
                                </div>
                            </div>
                        <% } else { %>
                            <div class="w-full h-48 bg-gray-200 rounded-lg mb-4 flex items-center justify-center">
                                <span class="text-gray-500">Image not available</span>
                            </div>
                        <% } %>
                        <p class="font-semibold">Distress Type: <%= assessment.distress_type.charAt(0).toUpperCase() + assessment.distress_type.slice(1) %></p>
                        <p>Distress Level: <%= assessment.distress_level %></p>
                        <p class="text-sm text-gray-500">Image ID: <%= assessment.image_id %></p>
                    </div>
                <% }); %>
            </div>
        </div>

        <!-- Field Test -->
        <% if (fieldTest) { %>
        <div class="bg-white rounded-lg shadow p-6 mb-6">
            <h2 class="text-2xl font-bold text-gray-800 mb-4">Field Test</h2>
            <p class="text-sm text-gray-600 mb-4">Field data collection assessment</p>
            <div class="grid grid-cols-1 lg:grid-cols-2 gap-4 md:gap-6">
                <div>
                    <% if (fieldTest.image_url) { %>
                        <div class="relative group">
                            <img src="<%= fieldTest.image_url %>" 
                                 alt="Field Test Image" 
                                 class="w-full h-48 object-cover rounded-lg mb-4 assessment-image cursor-zoom-in hover:opacity-90 transition-opacity"
                                 onerror="this.src='placeholder-image.jpg'; this.onerror=null;"
                                 onclick="openImageModal('<%= fieldTest.image_url %>')">
                            <div class="absolute inset-0 flex items-center justify-center opacity-0 group-hover:opacity-100 transition-opacity"
                                 onclick="openImageModal('<%= fieldTest.image_url %>')">
                                <div class="bg-black bg-opacity-50 rounded-full p-2">
                                    <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" 
                                              d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0zM10 7v6m3-3H7">
                                        </path>
                                    </svg>
                                </div>
                            </div>
                        </div>
                    <% } else { %>
                        <div class="w-full h-48 bg-gray-200 rounded-lg mb-4 flex items-center justify-center">
                            <span class="text-gray-500">Image not available</span>
                        </div>
                    <% } %>
                </div>
                <div class="space-y-2">
                    <p class="font-semibold text-gray-700">Distress Type: <span class="font-normal"><%= fieldTest.distress_type.charAt(0).toUpperCase() + fieldTest.distress_type.slice(1) %></span></p>
                    <p class="font-semibold text-gray-700">Distress Level: <span class="font-normal"><%= fieldTest.distress_level %></span></p>
                    
                    <% if (fieldTest.latitude && fieldTest.longitude) { %>
                        <div class="mt-4">
                            <h3 class="font-semibold text-gray-700 mb-2">Location Details:</h3>
                            <p class="text-gray-600">Latitude: <span class="font-medium"><%= fieldTest.latitude %></span></p>
                            <p class="text-gray-600">Longitude: <span class="font-medium"><%= fieldTest.longitude %></span></p>
                            <% if (fieldTest.accuracy) { %>
                                <p class="text-gray-600">Accuracy: <span class="font-medium"><%= fieldTest.accuracy %> meters</span></p>
                            <% } %>
                            <a href="https://www.google.com/maps?q=<%= fieldTest.latitude %>,<%= fieldTest.longitude %>" 
                               target="_blank"
                               class="inline-block mt-2 text-blue-600 hover:text-blue-800 underline">
                                View on Google Maps
                            </a>
                        </div>
                    <% } else { %>
                        <p class="text-gray-500 italic">No location data available</p>
                    <% } %>
                </div>
            </div>
        </div>
        <% } %>

        <!-- Action Buttons -->
        <div class="flex flex-col sm:flex-row justify-end space-y-2 sm:space-y-0 sm:space-x-4 mt-8">
            <button onclick="window.history.back()" 
                    class="w-full sm:w-auto px-6 py-2 bg-gray-100 text-gray-600 rounded-lg hover:bg-gray-200 transition-colors flex items-center justify-center space-x-2">
                <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                </svg>
                <span>Close</span>
            </button>
            <button onclick="openApproveModal('<%= evaluator.id %>')" 
                    class="w-full sm:w-auto px-6 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition-colors flex items-center justify-center space-x-2">
                <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                </svg>
                <span>Approve</span>
            </button>
            <button onclick="openRejectModal('<%= evaluator.id %>')" 
                    class="w-full sm:w-auto px-6 py-2 bg-red-100 text-red-600 rounded-lg hover:bg-red-200 transition-colors flex items-center justify-center space-x-2">
                <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                </svg>
                <span>Reject</span>
            </button>
        </div>
    </div>

    <%- include('../partials/footer') %>
    
    <script>
        // Toast configuration
        const Toast = Swal.mixin({
            toast: true,
            position: "top-end",
            showConfirmButton: false,
            timer: 2000,
            timerProgressBar: true,
            didOpen: (toast) => {
                toast.addEventListener("mouseenter", Swal.stopTimer);
                toast.addEventListener("mouseleave", Swal.resumeTimer);
            },
        });

        // Modal management variables
        let currentEvaluatorId = null;

        // Initialize modal elements after DOM is loaded
        document.addEventListener('DOMContentLoaded', function() {
            // Approve modal elements
            const approveModal = document.getElementById('approve-modal');
            const approveModalBackdrop = document.getElementById('approve-modal-backdrop');
            
            // Reject modal elements
            const rejectModal = document.getElementById('reject-modal');
            const rejectModalBackdrop = document.getElementById('reject-modal-backdrop');
            
            // Add event listeners for approve modal
            document.getElementById('close-approve-modal').addEventListener('click', closeApproveModal);
            document.getElementById('cancel-approve').addEventListener('click', closeApproveModal);
            approveModalBackdrop.addEventListener('click', closeApproveModal);
            
            // Add event listeners for reject modal
            document.getElementById('close-reject-modal').addEventListener('click', closeRejectModal);
            document.getElementById('cancel-reject').addEventListener('click', closeRejectModal);
            rejectModalBackdrop.addEventListener('click', closeRejectModal);
            
            // Confirm handlers
            document.getElementById('confirm-approve').addEventListener('click', approveSubmission);
            document.getElementById('confirm-reject').addEventListener('click', rejectSubmission);
        });

        // Open approve modal
        function openApproveModal(id) {
            currentEvaluatorId = id;
            const approveModal = document.getElementById('approve-modal');
            const approveModalBackdrop = document.getElementById('approve-modal-backdrop');
            
            approveModal.classList.remove('hidden');
            approveModal.classList.add('flex');
            approveModalBackdrop.classList.add('active');
            document.body.classList.add('modal-open');
        }

        // Close approve modal
        function closeApproveModal() {
            const approveModal = document.getElementById('approve-modal');
            const approveModalBackdrop = document.getElementById('approve-modal-backdrop');
            
            approveModal.classList.add('hidden');
            approveModal.classList.remove('flex');
            approveModalBackdrop.classList.remove('active');
            document.body.classList.remove('modal-open');
        }

        // Open reject modal
        function openRejectModal(id) {
            currentEvaluatorId = id;
            const rejectModal = document.getElementById('reject-modal');
            const rejectModalBackdrop = document.getElementById('reject-modal-backdrop');
            
            rejectModal.classList.remove('hidden');
            rejectModal.classList.add('flex');
            rejectModalBackdrop.classList.add('active');
            document.body.classList.add('modal-open');
        }

        // Close reject modal
        function closeRejectModal() {
            const rejectModal = document.getElementById('reject-modal');
            const rejectModalBackdrop = document.getElementById('reject-modal-backdrop');
            
            rejectModal.classList.add('hidden');
            rejectModal.classList.remove('flex');
            rejectModalBackdrop.classList.remove('active');
            document.body.classList.remove('modal-open');
        }

        // Approve submission
        async function approveSubmission() {
            if (!currentEvaluatorId) return closeApproveModal();
            
            try {
                const response = await fetch(`/admin/approve/${currentEvaluatorId}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                });
                
                closeApproveModal();
                
                const result = await response.json();
                
                if (!result.success) {
                    throw new Error(result.message);
                }
                
                Toast.fire({
                    icon: "success",
                    title: "Evaluator approved successfully!"
                });
                setTimeout(() => {
                    window.location.href = '/admin/evaluation-dashboard';
                }, 1000);
                
            } catch (error) {
                closeApproveModal();
                console.error('Approval error:', error);
                Toast.fire({
                    icon: "error",
                    title: error.message || 'Failed to approve evaluator',
                    timerProgressBar: false
                });
            }
        }

        // Reject submission
        async function rejectSubmission() {
            if (!currentEvaluatorId) return closeRejectModal();
            
            try {
                const response = await fetch(`/admin/reject/${currentEvaluatorId}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                });
                
                closeRejectModal();
                
                const result = await response.json();
                
                if (!result.success) {
                    throw new Error(result.message);
                }
                
                Toast.fire({
                    icon: "success",
                    title: "Evaluation rejected successfully"
                });
                setTimeout(() => {
                    window.location.href = '/admin/evaluation-dashboard';
                }, 1000);
                
            } catch (error) {
                closeRejectModal();
                console.error('Rejection error:', error);
                Toast.fire({
                    icon: "error",
                    title: error.message || 'Failed to reject evaluation',
                    timerProgressBar: false
                });
            }
        }

        // Get modal elements
        const imageModal = document.getElementById('imageModal');
        const modalImage = document.getElementById('modalImage');

        // Function to open modal
        function openImageModal(imgSrc) {
            modalImage.src = imgSrc;
            requestAnimationFrame(() => {
                imageModal.style.display = 'flex';
                setTimeout(() => {
                    imageModal.style.opacity = '1';
                }, 10);
            });
            document.body.classList.add('modal-open');
        }

        // Function to close modal
        function closeImageModal() {
            imageModal.style.opacity = '0';
            setTimeout(() => {
                imageModal.style.display = 'none';
                document.body.classList.remove('modal-open');
            }, 300);
        }

        // Close modal when clicking outside the image
        imageModal.addEventListener('click', (e) => {
            if (e.target === imageModal) {
                closeImageModal();
            }
        });

        // Close modal with escape key
        document.addEventListener('keydown', (e) => {
            if (e.key === 'Escape') {
                // Close any open modal
                if (imageModal.style.display === 'flex') {
                    closeImageModal();
                } else if (!document.getElementById('approve-modal').classList.contains('hidden')) {
                    closeApproveModal();
                } else if (!document.getElementById('reject-modal').classList.contains('hidden')) {
                    closeRejectModal();
                }
            }
        });
    </script>
</body>
</html> 